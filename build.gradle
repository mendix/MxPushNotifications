apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava]*.options*.encoding = 'UTF-8'

import org.gradle.api.internal.file.copy.CopySpecInternal

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:6.0.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.26.0'
    }
}

apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.ben-manes.versions'

project.ext {
    PNC_VERSION = '7.0.0'
    MXBUILD_VERSION = '9.18.0.53394'
    MODULE_NAME = 'PushNotifications'
}

def runtimeLibs = "$buildDir/runtime/bundles"
def monoPath = '/Library/Frameworks/Mono.framework/Versions/Current/Commands'

def userLibDir = "$projectDir/test/userlib"
def testProject = "$projectDir/test/PushNotfications.mpr"

configurations {
    tar
}

repositories {
    mavenCentral()
    ivy {
        url 'https://cdn.mendix.com/'
        patternLayout {
            artifact '/[organisation]/[module]-[revision].[ext]'
        }
        metadataSources {
            artifact()
        }
    }
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'

    implementation('com.google.auth:google-auth-library-oauth2-http:1.7.0') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    implementation('com.turo:pushy:0.13.10') {
        exclude group: 'io.netty', module: 'netty-codec-http2'
        exclude group: 'io.netty', module: 'netty-handler-proxy'
        exclude group: 'io.netty', module: 'netty-resolver-dns'
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    
    implementation('io.netty:netty-codec-http2') {
        version {
            strictly '4.1.78.Final'
        }
    }

    implementation('io.netty:netty-handler-proxy') {
        version {
            strictly '4.1.78.Final'
        }
    }

    implementation('io.netty:netty-resolver-dns') {
        version {
            strictly '4.1.78.Final'
        }
    }

    implementation('com.google.code.gson:gson') {
        version {
            strictly '2.9.0'
        }
    }

    tar "runtime:mxbuild:${project.MXBUILD_VERSION}@tar.gz"
}

task extractModule( type: Exec ) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        executable "$buildDir/modeler/mxutil.exe"
        args 'create-module-package', '--filter-required-libs', '--exclude-files=resources/.*', "--package-dir=${projectDir}/dist/${project.PNC_VERSION}/module", testProject, project.MODULE_NAME
    } else {
        executable "$monoPath/mono"
        args "$buildDir/modeler/mxutil.exe", 'create-module-package', '--filter-required-libs', '--exclude-files=resources/.*', "--package-dir=${projectDir}/dist/${project.PNC_VERSION}/module", testProject, project.MODULE_NAME
    }
}

extractModule.doFirst {
    mkdir "${projectDir}/dist/${project.PNC_VERSION}/module"
}

task copyToUserlib( type: Copy ) {
    into userLibDir
    from configurations.runtimeClasspath
    eachFile { fileCopyDetails ->
        def requiredLibFlag = new File(destinationDir, "${fileCopyDetails.name}.${project.MODULE_NAME}.RequiredLib")
        requiredLibFlag.write ''
    }
}

task untarMxbuild( type: Copy ) {
    configurations.tar.findAll{it.name.endsWith('tar.gz')}.each {
        from tarTree(resources.gzip(it))
        into buildDir
        include('**/modeler/**')
        includeEmptyDirs = false
    }
}

task prepareDeps {
    dependsOn 'clean', 'copyToUserlib', 'untarMxbuild'
}

clean {
    delete "$userLibDir"
}

tasks.untarMxbuild.shouldRunAfter tasks.copyToUserlib
