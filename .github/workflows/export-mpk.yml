name: Export module package

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: app
          
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: 'mendixlabs/mx-docker-tools'
          path: 'mx-tools'
          
      - name: Define MX_VERSION
        run: |
          cd $GITHUB_WORKSPACE/app/module
          VERSION=$(sqlite3 PushNotifications.mpr 'SELECT _ProductVersion FROM _MetaData LIMIT 1')
          echo "Detected Mendix version: $VERSION"
          echo "MX_VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Read package.json
        id: set_module_version
        run: |
          content=`cat $GITHUB_WORKSPACE/app/widget/package.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"

      - name: Define MODULE_VERSION
        run: |
          MODULE_VERSION=${{fromJson(steps.set_module_version.outputs.packageJson).version}}
          echo "Detected module version: $MODULE_VERSION"
          echo "MODULE_VERSION=$MODULE_VERSION" >> $GITHUB_ENV
      
      - name: Create output directory
        run: mkdir $GITHUB_WORKSPACE/out
            
      - name: Build MX Util
        run: |
          cd $GITHUB_WORKSPACE/mx-tools
          make version=${{env.MX_VERSION}} build
          
      - name: Run MX Util
        run: |
          MX_TOOLS_IMAGE="mendixlabs/mx-docker-tools:"${{env.MX_VERSION}}
          mkdir { $GITHUB_WORKSPACE/app/tmp, $GITHUB_WORKSPACE/app/dist }
          docker run -v $GITHUB_WORKSPACE/app:/opt/app -i $MX_TOOLS_IMAGE mxutil.exe create-module-package --package-dir /opt/app/tmp /opt/app/module/PushNotifications.mpr "PushNotifications" --filter-required-libs --exclude-files="resources" | tee $GITHUB_WORKSPACE/out/mxutil.log
          cp -f $GITHUB_WORKSPACE/app/tmp/PushNotifications.mpk $GITHUB_WORKSPACE/app/dist/PushNotifications-${{env.MODULE_VERSION}}.mpk

      - name: Remove non-whitelisted widgets
        run: |
          TEMP_UNZIP_FOLDER="$GITHUB_WORKSPACE/temp"
          TARGET_MPK="$GITHUB_WORKSPACE/app/dist/PushNotifications-${{env.MODULE_VERSION}}.mpk"
          ALLOWED_LIST="$GITHUB_WORKSPACE/app/widgets-whitelist.txt"
          if [ ! -f "$ALLOWED_LIST" ]; then 
            echo “Unable to find file widgets-whitelist.txt”
            exit 1; 
          fi
          if [ -d "$TEMP_UNZIP_FOLDER" ]; then rm -Rf $TEMP_UNZIP_FOLDER; fi
          mkdir $TEMP_UNZIP_FOLDER
          unzip -x $TARGET_MPK -d $TEMP_UNZIP_FOLDER
          cd "$TEMP_UNZIP_FOLDER/widgets"
          for i in *; do
            if ! grep -q "$i" $ALLOWED_LIST; then
              echo "Removing widget: $i" | tee -a $GITHUB_WORKSPACE/out/removed-widgets.log
              rm "$i"
              sed -i "/$i/d" $TEMP_UNZIP_FOLDER/package.xml
            fi
          done
          
          cd $TEMP_UNZIP_FOLDER
          zip -r PushNotifications-${{env.MODULE_VERSION}}.mpk *
          mv -f PushNotifications-${{env.MODULE_VERSION}}.mpk $GITHUB_WORKSPACE/app/dist/
          if [ -d "$TEMP_UNZIP_FOLDER" ]; then rm -Rf $TEMP_UNZIP_FOLDER; fi
      
      - name: Create release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Marketplace release v${{env.MODULE_VERSION}}
          tag_name: v${{env.MODULE_VERSION}}
          body: |
            (insert release notes)
          draft: true
          prerelease: false
          files: |
            app/dist/PushNotifications-${{env.MODULE_VERSION}}.mpk

      - name: Archive results
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Results
          path: ${{ github.workspace }}/out/*
